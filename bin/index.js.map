{"version":3,"sources":["../src/utils/consts.ts","../src/utils/initializePackageFolder.ts","../src/utils/logger.ts","../src/utils/promptDependencies.ts","../src/utils/configurePackageJSON.ts","../src/utils/configureTSConfigJSON.ts","../src/utils/preparePackage.ts","../src/utils/copyTemplates.ts","../src/installers/eslintInstaller.ts","../src/installers/huskyInstaller.ts","../src/installers/jestInstaller.ts","../src/installers/rsbuildInstaller.ts","../src/installers/sassInstaller.ts","../src/installers/tailwindInstaller.ts","../src/utils/configureReleaseConfig.ts","../src/installers/tsupInstaller.ts","../src/installers/viteInstaller.ts","../src/installers/styledComponentsInstaller.ts","../src/installers/derivInstaller.ts","../src/index.ts","../src/installers/folderInstaller.ts"],"sourcesContent":["import boxen from 'boxen';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// With the move to TSUP as a build tool, this keeps path routes in other files (installers, loaders, etc) in check more easily.\n// Path is in relation to a single index.js file inside ./dist\nconst __filename = fileURLToPath(import.meta.url);\nconst distPath = path.dirname(__filename);\n\nconst isDev = process.env.npm_lifecycle_event === 'dev';\nexport const rootPath = process.cwd();\nexport const cliPath = path.join(distPath, isDev ? '../src' : '../bin');\nexport const templatesPath = path.join(cliPath, 'templates');\n\nexport const BANNER = [\n    '     ____  __________  _____    __    __   ______ ',\n    '    / __ / ____/ __ / // /|  / / /   |  / / __   /',\n    '   / / / / __/ / /_/ // / | | / /____| | / /__/ / ',\n    '  / /_/ / /___/ _, _// /  | |/ /_____/ |/ // __/  ',\n    ' /_____/_____/_/ |_/___/  |___/      |___//____/  ',\n].join('\\n');\n\nexport const ALIAS_MAPPER = {\n    atSign: '@',\n    tildeSign: '~',\n};\n","import fs from 'fs-extra';\nimport path from 'path';\nimport { rootPath } from './consts';\nimport { error } from './logger';\n\nexport const initializePackageFolder = (packageName: string) => {\n    const packagePath = path.join(rootPath, packageName);\n\n    if (fs.existsSync(packagePath)) {\n        error(`The package ${packageName} already exists!`);\n        process.exit(1);\n    } else {\n        fs.mkdirSync(path.join(rootPath, packageName));\n    }\n};\n","import chalk from \"chalk\";\n\nexport const info = (message: string) => console.log(chalk.cyan(message));\nexport const error = (message: string) => console.log(chalk.red(message));\n","import * as p from '@clack/prompts';\nimport { info } from './logger';\nimport fs from 'fs-extra';\nimport { rootPath } from './consts';\nimport path from 'path';\n\nconst validateName = (name: string) => {\n    if (!name.length) return 'A package name is required';\n\n    const isPackageExists = fs.existsSync(path.join(rootPath, name));\n    if (isPackageExists) return `The package folder ${name} already exists`;\n    return;\n};\n\nexport type LibraryDependencies = {\n    name: string;\n    type: 'library';\n    description: string;\n    repository?: string;\n    organizationName: string;\n    repositoryName: string;\n    shouldBootstrap: boolean;\n};\n\nexport type PackageDependencies = {\n    name: string;\n    type: 'package';\n    bundler: 'vite' | 'rsbuild';\n    styling: 'sass' | 'tailwind' | 'styledComponents';\n    shouldUseReactQuery: boolean;\n    derivPackages: ('derivUi' | 'derivUtils' | 'derivIcons')[];\n    shouldBootstrap: boolean;\n    aliases?: 'atSign' | 'capitalizeSign';\n    folders?: string[];\n};\n\ntype Dependencies = LibraryDependencies | PackageDependencies;\n\nexport const promptDependencies = async (): Promise<Dependencies> => {\n    const packageName = await p.text({\n        message: 'What is the name of the new V2 package? (should be the same name as the Github repository)',\n        validate: validateName,\n    });\n    const isLibrary = await p.confirm({\n        message: 'Is this for a library?',\n        initialValue: false,\n    });\n\n    if (isLibrary) {\n        const description = await p.text({\n            message: 'Provide a short description of the library',\n            validate(value) {\n                if (value.length === 0) return 'A description is required';\n            },\n        });\n        const organizationName = await p.text({\n            message: 'Provide the Github organization name owning this library',\n            initialValue: `deriv-com`,\n        });\n        const repositoryName = await p.text({\n            message: `Provide the Github repository name for the library (found at https://github.com/${organizationName.toString()}/<REPOSITORY_NAME>)`,\n            validate(value) {\n                if (value.length === 0) return 'A repository name is required';\n            },\n        });\n        const repositoryUrl = `https://github.com/${organizationName}/${packageName.toString()}`;\n\n        const shouldBootstrap = await p.confirm({\n            message: 'Should we initialize a Git repository and bootstrap the package?',\n            initialValue: true,\n        });\n\n        const libraryDependencies: LibraryDependencies = {\n            name: packageName.toString(),\n            description: description.toString(),\n            repository: repositoryUrl.toString(),\n            organizationName: organizationName.toString(),\n            repositoryName: repositoryName.toString(),\n            type: 'library',\n            shouldBootstrap: Boolean(shouldBootstrap),\n        };\n\n        return libraryDependencies;\n    }\n    const dependencies = await p.group<PackageDependencies>(\n        {\n            bundler: () =>\n                p.select({\n                    message: 'Which bundler would you like to integrate?',\n                    options: [\n                        { value: 'vite', label: 'Vite' },\n                        { value: 'rsbuild', label: 'Rsbuild' },\n                    ],\n                    initialValue: 'webpack',\n                }),\n            styling: () =>\n                p.select({\n                    message: 'Which styling library will you be using?',\n                    options: [\n                        { value: 'tailwind', label: 'Tailwind', hint: 'includes twMerge and clsx' },\n                        { value: 'sass', label: 'Sass', hint: 'includes clsx' },\n                        { value: 'styledComponents', label: 'Styled Components' },\n                    ],\n                    initialValue: 'tailwind',\n                }),\n            derivPackages: () =>\n                p.multiselect({\n                    message: 'Which Deriv packages should be included?',\n                    options: [\n                        { value: 'derivUi', label: '@deriv/ui' },\n                        { value: 'derivUtils', label: '@deriv/utils' },\n                        { value: 'derivIcons', label: '@deriv/quill-icons' },\n                    ],\n                }),\n        },\n        {\n            onCancel: () => process.exit(1),\n        }\n    );\n\n    const shouldConfigureFolders = await p.confirm({\n        message: 'Do you want to configure the folder structure?',\n        initialValue: true,\n    });\n\n    let folders;\n    if (shouldConfigureFolders) {\n        folders = await p.multiselect({\n            message: 'Which folder structures should we bootstrap for you?',\n            options: [\n                { value: 'components', label: 'components', hint: 'at src/components' },\n                { value: 'pages', label: 'pages', hint: 'at src/pages' },\n                { value: 'screens', label: 'screens', hint: 'at src/screens' },\n                { value: 'hooks', label: 'hooks', hint: 'at src/hooks' },\n                { value: 'utils', label: 'utils', hint: 'at src/utils' },\n            ],\n        });\n    }\n\n    let aliases;\n    // TODO: Improve this later\n    // const shouldConfigureAlias = await p.confirm({\n    //     message: 'Do you wish to use path aliases?',\n    //     initialValue: true,\n    // });\n    // if (shouldConfigureAlias) {\n    //     aliases = await p.select({\n    //         message: 'Which alias type will you be using?',\n    //         options: [\n    //             { value: 'atSign', label: '@', hint: '@/components/*, @/hooks/*, @/utils/*, @/static/*' },\n    //             { value: 'capitalizeSign', label: 'Capitalize', hint: 'Components/*, Hooks/*, Utils/*, Static/*' },\n    //         ],\n    //         initialValue: 'atSign',\n    //     });\n    // }\n\n    const shouldBootstrap = await p.confirm({\n        message: 'Should we initialize a Git repository and bootstrap the package?',\n        initialValue: true,\n    });\n\n    const packageDependencies: PackageDependencies = {\n        name: packageName.toString(),\n        type: 'package',\n        ...dependencies,\n        shouldBootstrap: Boolean(shouldBootstrap),\n        aliases,\n        folders,\n    };\n\n    return packageDependencies;\n};\n","import fs from 'fs-extra';\nimport { join } from 'path';\n\ntype PackageJSONConfig = {\n    packagePath: string;\n    dependencies?: Record<string, string>;\n    devDependencies?: Record<string, string>;\n    name?: string;\n    description?: string;\n    repositoryUrl?: string;\n    scripts?: Record<string, string>;\n};\n\nexport const configurePackageJSON = ({\n    packagePath,\n    dependencies,\n    devDependencies,\n    scripts,\n    name,\n    description,\n    repositoryUrl,\n}: PackageJSONConfig) => {\n    const packageJsonPath = join(packagePath, 'package.json');\n    const packageJSON = fs.readJSONSync(packageJsonPath);\n\n    if (dependencies) {\n        for (const [dependency, version] of Object.entries(dependencies)) {\n            packageJSON.dependencies[dependency] = version;\n        }\n    }\n\n    if (devDependencies) {\n        for (const [devDependency, version] of Object.entries(devDependencies)) {\n            packageJSON.devDependencies[devDependency] = version;\n        }\n    }\n\n    if (scripts) {\n        Object.keys(scripts).forEach(command => (packageJSON.scripts[command] = scripts[command]));\n    }\n\n    if (name) packageJSON.name = name;\n    if (description) packageJSON.description = description;\n    if (repositoryUrl) {\n        packageJSON.repository = {\n            url: repositoryUrl,\n        };\n        packageJSON.homepage = `${repositoryUrl}#readme`;\n        packageJSON.bugs = {\n            url: `${repositoryUrl}/issues`,\n        };\n    }\n\n    fs.writeJSONSync(packageJsonPath, packageJSON, {\n        spaces: 2,\n    });\n};\n","import fs from 'fs-extra';\nimport { join } from 'path';\n\ntype TSConfigJSON = {\n    packagePath: string;\n    compilerOptions?: {\n        types?: string[];\n        paths?: Record<string, string[]>;\n    };\n};\n\nexport const configureTSConfigJSON = ({ packagePath, compilerOptions }: TSConfigJSON) => {\n    const tsConfigPath = join(packagePath, 'tsconfig.json');\n    const tsConfig = fs.readJSONSync(tsConfigPath);\n\n    if (compilerOptions) {\n        if (compilerOptions.paths) {\n            tsConfig.compilerOptions.paths = compilerOptions.paths;\n        }\n        if (compilerOptions.types) {\n            tsConfig.compilerOptions.types = compilerOptions.types;\n        }\n    }\n\n    fs.writeJSONSync(tsConfigPath, tsConfig, {\n        spaces: 2,\n    });\n};\n","import { exec } from 'child_process';\nimport util from 'util';\nimport { spinner } from '@clack/prompts';\nimport { LibraryDependencies, PackageDependencies } from './promptDependencies';\n\nconst asyncExec = util.promisify(exec);\n\nexport async function preparePackage(packagePath: string, dependencies: LibraryDependencies | PackageDependencies) {\n    const s = spinner();\n    try {\n        s.start('Initializing Git repository');\n        await asyncExec(`cd ${packagePath} && git init`);\n        if (dependencies.type === 'library')\n            await asyncExec(\n                `git remote add upstream git@github.com:${dependencies.organizationName}/${dependencies.repositoryName}.git`\n            );\n        s.message('Bootstrapping dependencies (this might take some time 😛)');\n        await asyncExec(`cd ${packagePath} && npm install`);\n        s.message('Preparing precommit hooks');\n        await asyncExec(`cd ${packagePath} && npm run prepare`);\n        if (dependencies.type === 'library') {\n            s.message('Setting up development branch for pre-release');\n            await asyncExec('git checkout -b development');\n        }\n        s.stop();\n    } catch (err) {\n        console.log(err);\n        s.stop('There was an error in bootstrapping the package');\n    }\n}\n","import { join } from 'path';\nimport { rootPath, templatesPath } from './consts';\nimport fs from 'fs-extra';\n\nexport function copyTemplates(packagePath: string, templateName: string) {\n    const templatePath = join(templatesPath, templateName);\n    const destinationPath = join(rootPath, packagePath) + '/';\n    fs.copySync(templatePath, destinationPath, {\n        overwrite: true,\n    });\n}\n","import { configurePackageJSON, copyTemplates } from '../utils';\n\nexport const eslintInstaller = (packagePath: string, isLibrary: boolean) => {\n    copyTemplates(packagePath, isLibrary ? 'libraryLinters' : 'linters');\n\n    configurePackageJSON({\n        packagePath,\n        devDependencies: isLibrary\n            ? {\n                  '@deriv-com/eslint-config-deriv': '^2.1.0-beta.3',\n                  'eslint-plugin-prettier': '^5.0.0',\n                  prettier: '^3.1.0',\n              }\n            : {\n                  '@deriv-com/eslint-config-deriv': '^2.1.0-beta.3',\n                  'eslint-plugin-prettier': '^5.0.0',\n                  stylelint: '^13.13.1',\n                  'stylelint-config-prettier': '^8.0.2',\n                  'stylelint-formatter-pretty': '^2.1.1',\n                  'stylelint-no-unsupported-browser-features': '^4.0.0',\n                  'stylelint-selector-bem-pattern': '^2.1.0',\n                  prettier: '^3.1.0',\n              },\n\n        scripts: {\n            'test:lint': 'prettier --log-level silent --write . && eslint \"./src/**/*.?(js|jsx|ts|tsx)\"',\n        },\n    });\n};\n","import { configurePackageJSON } from '../utils/configurePackageJSON';\nimport { copyTemplates } from '../utils';\n\nexport const huskyInstaller = (packagePath: string) => {\n    configurePackageJSON({\n        packagePath,\n        devDependencies: {\n            'lint-staged': '^10.4.0',\n            husky: '^7.0.0',\n            '@commitlint/cli': '^17.1.2',\n            '@commitlint/config-conventional': '^17.1.0',\n            '@commitlint/config-nx-scopes': '^17.0.0',\n        },\n        scripts: {\n            prepare: 'husky install',\n        },\n    });\n\n    copyTemplates(packagePath, 'husky');\n};\n","import { configurePackageJSON } from '../utils/configurePackageJSON';\nimport { copyTemplates } from '../utils';\n\nexport const jestInstaller = (packagePath: string) => {\n    configurePackageJSON({\n        packagePath,\n        devDependencies: {\n            jest: '^29.7.0',\n            'jest-environment-jsdom': '^29.7.0',\n            'jest-transformer-svg': '^2.0.2',\n            '@testing-library/jest-dom': '^6.4.2',\n            '@testing-library/react': '^14.2.1',\n            '@testing-library/user-event': '^14.5.2',\n            '@types/jest': '^29.5.12',\n            'identity-obj-proxy': '^3.0.0',\n            'ts-jest': '^29.1.2',\n        },\n    });\n\n    copyTemplates(packagePath, 'jest');\n};\n","import { eslintInstaller } from './eslintInstaller';\nimport { huskyInstaller } from './huskyInstaller';\nimport { configurePackageJSON, copyTemplates } from 'src/utils';\nimport { jestInstaller } from './jestInstaller';\n\nexport const rsbuildInstaller = (packagePath: string) => {\n    copyTemplates(packagePath, 'rsbuild');\n    copyTemplates(packagePath, 'actions');\n\n    eslintInstaller(packagePath, false);\n    huskyInstaller(packagePath);\n    jestInstaller(packagePath);\n    configurePackageJSON({\n        packagePath,\n        name: packagePath,\n    });\n};\n","import { configurePackageJSON } from '../utils';\n\nexport const sassInstaller = (packagePath: string) => {\n    configurePackageJSON({\n        packagePath,\n        dependencies: {\n            clsx: '^2.1.0',\n        },\n        devDependencies: {\n            sass: '^1.70.0',\n        },\n    });\n};\n","import { configurePackageJSON } from '../utils/configurePackageJSON';\nimport { join } from 'path';\nimport { copyTemplates } from 'src/utils';\n\nexport const tailwindInstaller = (packagePath: string) => {\n    configurePackageJSON({\n        packagePath,\n        dependencies: {\n            clsx: '^2.1.0',\n            'tailwind-merge': '^2.2.1',\n        },\n        devDependencies: {\n            tailwindcss: '^3.3.5',\n            autoprefixer: '^10.4.14',\n            postcss: '^8.4.31',\n            prettier: '^3.1.0',\n            'prettier-plugin-tailwindcss': '^0.5.7',\n        },\n    });\n\n    copyTemplates(packagePath, 'tailwind');\n};\n","import { parse } from '@babel/parser';\nimport traverse from '@babel/traverse';\nimport generate from '@babel/generator';\nimport fs from 'fs-extra';\nimport { join } from 'path';\n\ntype ReleaseConfig = {\n    packagePath: string;\n    organizationName: string;\n};\n\nexport default async function configureReleaseConfig({ packagePath, organizationName }: ReleaseConfig) {\n    const releaseConfigPath = join(packagePath, 'release.config.cjs');\n\n    if (!fs.existsSync(releaseConfigPath)) {\n        throw new Error('release.config.cjs does not exist within the package folder.');\n    }\n    const releaseConfigRaw = fs.readFileSync(releaseConfigPath, 'utf-8');\n\n    const ast = await parse(releaseConfigRaw);\n\n    await traverse.default(ast, {\n        ObjectProperty: function (path) {\n            if (path.node.key?.name === 'repositoryUrl') {\n                path.node.value.value = `git@github.com:${organizationName}/${packagePath}.git`;\n            }\n        },\n    });\n\n    const output = await generate.default(ast);\n\n    fs.writeFileSync(releaseConfigPath, output.code, 'utf-8');\n}\n","import { LibraryDependencies, configurePackageJSON, copyTemplates } from 'src/utils';\nimport { eslintInstaller } from './eslintInstaller';\nimport { huskyInstaller } from './huskyInstaller';\nimport configureReleaseConfig from '../utils/configureReleaseConfig';\n\nexport const tsupInstaller = (packagePath: string, libraryDependencies: LibraryDependencies) => {\n    copyTemplates(packagePath, 'tsup');\n\n    eslintInstaller(packagePath, true);\n    huskyInstaller(packagePath);\n\n    configureReleaseConfig({\n        packagePath,\n        organizationName: libraryDependencies.organizationName,\n    });\n\n    configurePackageJSON({\n        packagePath,\n        name: libraryDependencies.name,\n        description: libraryDependencies.description,\n        repositoryUrl: libraryDependencies.repository,\n        devDependencies: {\n            '@semantic-release/changelog': '^6.0.3',\n            '@semantic-release/github': '^9.2.6',\n            '@semantic-release/npm': '^11.0.3',\n            '@semantic-release/release-notes-generator': '^12.1.0',\n        },\n    });\n};\n","import { configurePackageJSON, copyTemplates } from '../utils';\nimport { eslintInstaller } from './eslintInstaller';\nimport { huskyInstaller } from './huskyInstaller';\nimport { jestInstaller } from './jestInstaller';\n\nexport const viteInstaller = (packagePath: string) => {\n    copyTemplates(packagePath, 'vite');\n    copyTemplates(packagePath, 'actions');\n\n    eslintInstaller(packagePath, false);\n    huskyInstaller(packagePath);\n    jestInstaller(packagePath);\n\n    configurePackageJSON({\n        packagePath,\n        name: packagePath,\n    });\n};\n","import { configurePackageJSON } from '../utils/configurePackageJSON';\n\nexport const styledComponentsInstaller = (packagePath: string) => {\n    configurePackageJSON({\n        packagePath,\n        dependencies: {\n            'styled-components': '^6.1.8',\n        },\n    });\n};\n","import { configurePackageJSON } from '../utils/configurePackageJSON';\n\nconst derivVersions = {\n    derivUi: {\n        dependency: '@deriv-com/ui',\n        version: 'latest',\n    },\n    derivUtils: {\n        dependency: '@deriv-com/utils',\n        version: 'latest',\n    },\n    derivIcons: {\n        dependency: '@deriv/quill-icons',\n        version: 'latest',\n    },\n};\n\nexport const derivInstaller = (packagePath: string, derivPackages: string[]) => {\n    let derivDependencies = {};\n    for (let i = 0; i < derivPackages.length; i++) {\n        const derivDependency = derivVersions[derivPackages[i]];\n        derivDependencies[derivDependency.dependency] = derivDependency.version;\n    }\n    configurePackageJSON({\n        packagePath,\n        dependencies: derivDependencies,\n    });\n};\n","#!/usr/bin/env node\n\nimport {\n    derivInstaller,\n    rsbuildInstaller,\n    sassInstaller,\n    tsupInstaller,\n    styledComponentsInstaller,\n    tailwindInstaller,\n    viteInstaller,\n} from './installers';\nimport {\n    BANNER,\n    initializePackageFolder,\n    promptDependencies,\n    info,\n    preparePackage,\n    LibraryDependencies,\n    PackageDependencies,\n} from './utils';\nimport gradient from 'gradient-string';\nimport chalk from 'chalk';\nimport boxen from 'boxen';\nimport { folderInstaller } from './installers/folderInstaller';\nimport { error } from './utils';\n\nconst printCommands = (packageName: string, dependencies: LibraryDependencies | PackageDependencies) => {\n    const listCommands = (commands: string[]) => commands.map(command => chalk.bold('➜') + `  ${command}`).join('\\n');\n    const bootstrapCmds = listCommands(['git init', 'npm install', 'npm run prepare']);\n\n    info(chalk.bold(`Navigate to ${packageName} folder and run the following commands:`));\n    info(\n        boxen(chalk.bold('➜') + `  cd ${packageName}\\n` + (!dependencies.shouldBootstrap ? bootstrapCmds : ''), {\n            padding: 2,\n            borderStyle: 'none',\n        })\n    );\n\n    info(chalk.bold('To start the development server:'));\n    info(\n        boxen(chalk.bold('➜') + '  npm run dev', {\n            padding: 2,\n            borderStyle: 'none',\n        })\n    );\n\n    if (dependencies.type === 'library') {\n        info(chalk.bold('To commit and publish for a pre-release version (e.g. 1.0.0-development.1):'));\n        info(\n            boxen(\n                listCommands([\n                    'git checkout -b development',\n                    'git add .',\n                    'git commit -m \"feat: initialized repository for library\"',\n                    'git push upstream development',\n                ]),\n                {\n                    padding: 2,\n                    borderStyle: 'none',\n                }\n            )\n        );\n    }\n};\n\nconst main = async () => {\n    const derivGradient = gradient('#b62020', '#fe8181');\n    console.log(derivGradient.multiline(BANNER));\n    console.log('\\n');\n    const dependencies = await promptDependencies();\n    const packageName = String(dependencies.name);\n\n    initializePackageFolder(packageName);\n\n    if (dependencies.type === 'library') {\n        tsupInstaller(packageName, dependencies);\n        if (dependencies.shouldBootstrap) await preparePackage(packageName, dependencies);\n        printCommands(packageName, dependencies);\n\n        return;\n    }\n\n    switch (dependencies.bundler) {\n        case 'vite':\n            viteInstaller(packageName);\n            break;\n        case 'rsbuild':\n            rsbuildInstaller(packageName);\n            break;\n        default:\n            break;\n    }\n\n    switch (dependencies.styling) {\n        case 'tailwind':\n            tailwindInstaller(packageName);\n            break;\n        case 'sass':\n            sassInstaller(packageName);\n            break;\n        case 'styledComponents':\n            styledComponentsInstaller(packageName);\n            break;\n        default:\n            break;\n    }\n\n    if (dependencies.derivPackages.length) {\n        derivInstaller(packageName, dependencies.derivPackages);\n    }\n\n    if (dependencies.folders) {\n        folderInstaller(packageName, dependencies.folders);\n    }\n\n    // TODO: Improve this later\n    // if (dependencies.aliases) {\n    //     await aliasInstaller(packageName, dependencies.bundler, dependencies.aliases, dependencies.folders);\n    // }\n\n    if (dependencies.shouldBootstrap) await preparePackage(packageName, dependencies);\n\n    printCommands(packageName, dependencies);\n};\n\nmain().catch(err => {\n    error('Aborting installation...');\n    if (err instanceof Error) {\n        error(err.message);\n    } else {\n        error('An unknown error has occurred:');\n        console.log(err);\n    }\n    process.exit(1);\n});\n","import { copyTemplates } from '../utils';\nimport { rootPath } from '../utils';\nimport { join } from 'path';\nimport fs from 'fs-extra';\n\nexport const folderInstaller = (packagePath: string, folders: string[]) => {\n    const destinationPath = join(rootPath, packagePath);\n\n    for (let i = 0; i < folders.length; i++) {\n        const destinationFolderPath = `${destinationPath}/src/${folders[i]}`;\n        if (!fs.existsSync(destinationFolderPath)) {\n            fs.mkdirSync(destinationFolderPath);\n            try {\n                const fd = fs.openSync(`${destinationFolderPath}/index.ts`, 'wx');\n                fs.closeSync(fd);\n            } catch (err) {\n                continue;\n            }\n        }\n    }\n};\n"],"mappings":"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","names":["path","fileURLToPath","__filename","distPath","isDev","rootPath","cliPath","templatesPath","BANNER","fs","path","chalk","info","message","error","initializePackageFolder","packageName","packagePath","path","rootPath","fs","error","p","fs","path","validateName","name","fs","rootPath","promptDependencies","packageName","description","value","organizationName","repositoryName","repositoryUrl","shouldBootstrap","dependencies","shouldConfigureFolders","folders","aliases","fs","join","configurePackageJSON","packagePath","dependencies","devDependencies","scripts","name","description","repositoryUrl","packageJsonPath","packageJSON","dependency","version","devDependency","command","fs","exec","util","spinner","asyncExec","preparePackage","packagePath","dependencies","s","err","join","fs","copyTemplates","packagePath","templateName","templatePath","join","templatesPath","destinationPath","rootPath","eslintInstaller","packagePath","isLibrary","copyTemplates","configurePackageJSON","huskyInstaller","packagePath","configurePackageJSON","copyTemplates","jestInstaller","packagePath","configurePackageJSON","copyTemplates","rsbuildInstaller","packagePath","copyTemplates","eslintInstaller","huskyInstaller","jestInstaller","configurePackageJSON","sassInstaller","packagePath","configurePackageJSON","tailwindInstaller","packagePath","configurePackageJSON","copyTemplates","parse","traverse","generate","fs","join","configureReleaseConfig","packagePath","organizationName","releaseConfigPath","releaseConfigRaw","ast","path","output","tsupInstaller","packagePath","libraryDependencies","copyTemplates","eslintInstaller","huskyInstaller","configureReleaseConfig","configurePackageJSON","viteInstaller","packagePath","copyTemplates","eslintInstaller","huskyInstaller","jestInstaller","configurePackageJSON","styledComponentsInstaller","packagePath","configurePackageJSON","derivVersions","derivInstaller","packagePath","derivPackages","derivDependencies","derivDependency","configurePackageJSON","gradient","chalk","boxen","join","fs","folderInstaller","packagePath","folders","destinationPath","rootPath","destinationFolderPath","fd","printCommands","packageName","dependencies","listCommands","commands","command","chalk","bootstrapCmds","info","boxen","main","derivGradient","gradient","BANNER","promptDependencies","initializePackageFolder","tsupInstaller","preparePackage","viteInstaller","rsbuildInstaller","tailwindInstaller","sassInstaller","styledComponentsInstaller","derivInstaller","folderInstaller","err","error"]}